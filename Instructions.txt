В первую очередь при создании любого бекенд-проекта, нужно учитывать структуру БД
Продумать какие модели будут, какие таблицы

Таблицы в БД создаются чаще всего с основны МОДЕЛЕЙ/СУЩНОСТЕЙ под них
Так же нужно продумать, как они будут связаны между собой

Например при создании условного пользователя, класса User (папка Model, файл User.java), мы дали ему
аннотации для класса

-- Основные шаги при проектировании моделей
- Определить основные сущности (модели)
- Определить связи между ними (OneToOne, OneToMany, ManyToOne, ManyToMany)
- Добавить аннотации JPA( - @Column(nullable = false) и типа такого -) для связи моделей с базой данных
- Добавить валидацию (@NotNull, @Size, @Pattern, @Email и др.)
- Продумать поведение данных (@PrePersist, @PreUpdate)

-- Разберем конкретнее JPA-аннотации для работы с БД
- @Entity - Определяет, что класс является сущностью в базе данных
- @Table(name = "название") - Определяет имя таблицы в БД
- @Id - Указывает первичный ключ
- @GeneratedValue(strategy = GenerationType.IDENTITY) - Автоматически генерирует ID
- @Column(nullable = false) - Указывает, что поле обязательно для заполнения
- @Column(unique = true) - Поле должно быть уникальным (например, email, username)
- @Enumerated(EnumType.STRING) - 	Хранит enum в виде строки
- @PrePersist - Вызывается до сохранения новой записи в БД
- @PreUpdate - Вызывается перед обновлением существующей записи

-- JPA-аннотации для связей между таблицами
- @OneToOne	- Один к одному (например, User → Profile).
- @OneToMany - Один ко многим (например, User → Certificates).
- @ManyToOne - Многие к одному (например, VolunteerHours → User).
- @ManyToMany - Многие ко многим (например, User ↔ Event).
- @JoinColumn(name = "column_name")	- Указывает внешний ключ для связи.

-- Валидация данных в Spring Boot
- @NotNull - Поле не может быть null.
- @NotEmpty	- Поле не может быть пустым ("").
- @Size(min = 2, max = 255)	- Ограничивает длину строки.
- @Pattern(regexp = "regex") - Проверяет строку по регулярному выражению.
- @Email - Проверяет правильность email.
- @Past / @Future - Гарантирует, что дата в прошлом или будущем.

@Entity – указывает, что этот класс представляет сущность в БД.
@Table(name = "Users") – определяет имя таблицы в базе данных (по умолчанию использовалось бы имя класса).
@Getter / @Setter – автоматически создаёт геттеры и сеттеры для всех полей (Lombok).
@NoArgsConstructor – создаёт пустой конструктор User() (обязателен для JPA).
@AllArgsConstructor – создаёт конструктор со всеми аргументами User(id, name, email, ...).
@Builder – добавляет паттерн Builder для удобного создания объектов.

- Какие сущности (модели) будут в системе?
- Как они будут связаны между собой?
про связи, иногда сущности могут быть связаны друг с другом. Например энамку Gender, мы связываем с сущностью юзера
так же и разные сущности могут быть связаны
