В первую очередь при создании любого бекенд-проекта, нужно учитывать структуру БД
Продумать какие модели будут, какие таблицы

Таблицы в БД создаются чаще всего с основном МОДЕЛЕЙ под них
Так же нужно продумать, как они будут связаны между собой

Например при создании условного пользователя, класса User (папка Model, файл User.java), мы дали ему
аннотации для класса

@Entity – указывает, что этот класс представляет сущность в БД.
@Table(name = "Users") – определяет имя таблицы в базе данных (по умолчанию использовалось бы имя класса).
@Getter / @Setter – автоматически создаёт геттеры и сеттеры для всех полей (Lombok).
@NoArgsConstructor – создаёт пустой конструктор User() (обязателен для JPA).
@AllArgsConstructor – создаёт конструктор со всеми аргументами User(id, name, email, ...).
@Builder – добавляет паттерн Builder для удобного создания объектов.

- Какие сущности (модели) будут в системе?
- Как они будут связаны между собой?
про связи, иногда сущности могут быть связаны друг с другом. Например энамку Gender, мы связываем с сущностью юзера
так же и разные сущности могут быть связаны
